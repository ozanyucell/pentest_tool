#!/usr/bin/env python3

from codecs import ignore_errors
import ipaddress
import subprocess as sp
import re

ipv4 = '[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}\.[1-9][0-9]{0,2}'
port = '[1-9][0-9]{0,5}\/[a-zA-Z]{1,5}'
open_port = '[1-9][0-9]{0,5}\/[a-zA-Z]{1,5}[\s]{1,5}open'

# nmap usage: https://www.vjsecurity.net/2021/09/what-is-nmap-uses-and-functions-of-nmap.html

def icmp_ping():
    print('Scanning with nmap...')
    result = sp.getoutput('nmap -sn 192.168.1.1-254')
    print()
    print('Scan is done.')
    ip_addresses = re.findall(f"{ipv4}", result)

    with open(f"./icmp.dat", mode="w", encoding="utf-8") as file:
        for ip in ip_addresses:
            file.write(ip + "\n")

def port_identification():
    with open(f"./icmp.dat", mode="r", encoding="utf-8") as file:
        ip_text = file.read()
        ip_addresses = ip_text.split("\n")

    live_hosts = []
    for ip in ip_addresses:
        ip_check = sp.getoutput(f"nmap -Pn {ip}")
        if (re.search("0 hosts up", ip_check)):
            continue
        live_hosts.append(ip)

    for ip in live_hosts:
        ports = sp.getoutput(f"nmap -Pn {ip}")
        for line in ports.splitlines():
            if (re.search(f"{port}", line)):
                with open(f"./ports.dat", mode="w", encoding="utf-8") as file:
                    file.write(ip + " " + line.split()[0] + " " +  line.split()[2])

# PORT SAYISI KADAR HER IP İÇİN TEKRAR TEKRAR DÖNÜYOR (SANIRIM FIXLEDİM KONTROL ETMEK LAZIM)
def open_port_identification():
    with open(f"./ports.dat", mode="r", encoding="utf-8") as file:
        ports_text = file.read()
        ip_addresses = set(re.findall(f"{ipv4}", ports_text))

    alive_hosts = []
    for ip in ip_addresses:
        ip_check = sp.getoutput(f"nmap -Pn {ip}")
        if (re.search("0 hosts up", ip_check)):
            continue
        alive_hosts.append(ip)

    for ip in alive_hosts:
        ports = sp.getoutput(f"nmap -Pn {ip}")
        for line in ports.splitlines():
            if (re.search(f"{open_port}", line)):
                with open(f"./open_ports.dat", mode="w", encoding="utf-8") as file:
                    file.write(ip + " " + line.split()[0] + " " +  line.split()[2])

def os_fingerprint_idetification():
    # https://nmap.org/book/osdetect-usage.html
    # https://www.geeksforgeeks.org/os-detection-in-nmap-in-kali-linux/
    with open(f"./open_ports.dat", mode="r", encoding="utf-8") as file:
        open_ports_text = file.read()
        ip_addresses = re.findall(f"{ipv4}", open_ports_text)

    for ip in ip_addresses:
        os = sp.getoutput(f"nmap -sS {ip} -O")

        if (re.search("No exact OS matches for host", os)):
            os = sp.getoutput(f"nmap -sS {ip} -o --osscan-guess")
            for line in os.splitlines():
                if(line.startswith("Aggressive OS guesses: ")):
                    oses = line[line.index(":")+2:].split(", ")
                    print("No exact OS found. Here are some guesses:")
                    for osp in oses:
                        print(osp)

        else:
            for line in os.splitlines():
                if(line.startswith("OS details: ")):
                    print(line[line.index(":")+2:])

def router_firewall_identification():
    return 0

def web_server_detection():
    return 0

def snmp_detection():
    return 0

def syn_flood():
    return 0

def show():
    with open(f"./icmp.dat", mode="r", encoding="utf-8") as file:
        icmp_text = file.read()
    print()
    print("icmp.dat file:")
    print(icmp_text)
    print("-"*50)

    with open(f"./ports.dat", mode="r", encoding="utf-8") as file:
        ports = file.read()
    print("ports.dat file:")
    print(ports)
    print("-"*50)

    with open("./open_ports.dat", mode="r", encoding="utf-8") as file:
        open_ports = file.read()
    print("open_ports.dat file:")
    print(open_ports)
    print("-"*50)

    with open("./os_results.dat", mode="r", encoding="utf-8") as file:
        os_results = file.read()
    print("os_results.dat file:")
    print(os_results)
    print("-"*50)

def sniff():
    return 0

def main(): # main function
        print("Welcome.")
        print("-"*50)
        print("1.  ICMP Ping")
        print("2.  Port Identification")
        print("3.  Open Port Identification")
        print("4.  OS Fingerprint Identification")
        print("5.  Router & Firewall Detection")
        print("6.  Web Server Detection")
        print("7.  SNMP Detection")
        print("8.  SYN_flood")
        print("9.  Show")
        print("10. Sniff")
        print("11. Exit")
        print("-"*50)
        choice = int(input())

        if (choice==1):
            icmp_ping()
        elif (choice==2):
            port_identification()
        elif (choice==3):
            open_port_identification()
        elif (choice==4):
            os_fingerprint_idetification()
        elif (choice==5):
            router_firewall_identification()
        elif (choice==6):
            web_server_detection()
        elif (choice==7):
            snmp_detection()
        elif (choice==8):
            syn_flood()
        elif (choice==9):
            show()
        elif (choice==10):
            sniff()
        elif (choice==11):
            exit()
        else:
            print("Please enter a valid option.")

if __name__ == "__main__":
    main()
